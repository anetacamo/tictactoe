{"version":3,"sources":["components/button.jsx","components/board.jsx","App.js","index.js"],"names":["Button","className","onClick","props","this","value","Component","console","log","rowsAndColumns","Array","fill","map","e","i","matrix","winner","forEach","row","index","column","j","length","lastColumn","nextColumn","calculateWinner","Board","state","width","squares","widths","player","setState","number","lines","horizontals","push","chunk","splice","verticals","printing","line","item","includes","nextturn","updateArray","square","handleClick","key","App","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bc74bca.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Button extends Component {\n  render () {\n    return (\n      <button className=\"square\" onClick={() => this.props.onClick()}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport Button from \"./button\";\n\nfunction getMatrix(rowsAndColumns) {\n  return [\n    Array(rowsAndColumns).fill().map((e,i) => {\n      return Array(rowsAndColumns).fill().map(e => i === 0 ? 'X' : '')\n    })\n  ]\n}\n\nconst ourMatrix = [\n  ['X', 'X', 'X'],\n  ['', '', ''],\n  ['', '', '']\n]\n\nconsole.log('Aneta is pretty')\nconst matrix = getMatrix(3)\n\nfunction calculateWinner(matrix) {\n  let winner = null\n  matrix.forEach((row, index) => {\n    row.forEach((column, j) => {\n      if(column !== '' && j > 0 && j < row.length - 1) {\n        const lastColumn = row[j-1]\n        const nextColumn = row[j+1]\n        const isLastColumnIdentical = lastColumn === column\n        const isNextColumnIdentical = nextColumn === column\n        if(isLastColumnIdentical && isNextColumnIdentical){\n          winner = column\n        }\n      }\n    })\n  })\n  return winner\n}\n\nconsole.log(calculateWinner(ourMatrix))\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 3,\n      squares: Array(9).fill(null),\n      widths: [3,4,6,10],\n      player: \"X\",\n      winner: \"\",\n      matrix: [\n        ['', '', ''],\n        ['', '', ''],\n        ['', '', '']\n      ]\n    };\n  }\n  handleClick(i) {\n    const squares = this.state.squares;\n    if (squares[i] === null) {\n      squares[i] = this.state.player;\n      this.setState({squares});\n      var player = this.state.player;\n      player === \"X\" ? player = \"O\" : player = \"X\"\n      this.setState({player});\n    }\n  }\n  updateArray(number) {\n    const squares = Array(number * number).fill(null)\n    this.setState({squares});\n    this.setState({ width:number });\n  }\n\n  calculateWinner() {\n    const squares = this.state.squares;\n    const lines = [];\n\n    //VERTICAL\n    var width = this.state.width;\n    var horizontals = [];\n    for (var i, i = 0; i < (width*width); i++) {\n      horizontals.push(i);\n    }\n    var chunk\n    while (horizontals.length > 0) {\n      chunk = horizontals.splice(0,width)\n      lines.push(chunk)\n    }\n\n    var verticals = [];\n    for (var i, i = 0; i < width; i++) {\n      for (var j, j = i; j < (width*width); j+=(width)) {\n        verticals.push(j);\n      }\n    }\n    var chunk\n    while (verticals.length > 0) {\n      chunk = verticals.splice(0,width)\n      lines.push(chunk)\n    }\n\n\n    //DIAGONALS\n    var diagonals = [];\n    var row = 3\n\n    // here we only want top right\n    for (var i, i = (row - 1); i < width; i++) {\n      for (var j, j = i; j < (width*width); j+=(width-1)) {\n      }\n    }\n\n    // top left\n    for (var i, i = 0; i < (width - row + 1); i++) {\n      for (var j, j = i; j < (width*width); j+=(width+1)) {\n      }\n    }\n\n\n    var printing = \"\";\n\n    lines.forEach(function(line) {\n      printing = printing + \"-\";\n      line.forEach(function(item) {\n        if (squares[item] !== null) {\n          printing = printing + squares[item];\n        }\n      });\n    })\n    var winner = \"\";\n    console.log(printing)\n\n    if (printing.includes(\"XXX\")) {\n      return winner = \"X made 3!\";\n      console.log(winner)\n    }\n    if (printing.includes(\"XXXX\")) {\n      return winner = \"X made 4!\";\n    }\n    if (printing.includes(\"XXXXX\")) {\n      return winner = \"X made 5!\";\n    }\n    if (printing.includes(\"OOO\")) {\n      return winner = \"O made 3!\";\n    }\n    if (printing.includes(\"OOOO\")) {\n      return winner = \"O made 4!\";\n      console.log(winner)\n    }\n    if (printing.includes(\"OOOOO\")) {\n      return winner = \"O made 5!\";\n    }\n  }\n\n  render () {\n    console.log(\"re-render\")\n    var winner = this.calculateWinner();\n    let nextturn = 'Next player: ' + this.state.player;\n    return(\n      <div>\n        <button onClick={() => this.updateArray(3)}>New Game</button>\n\n        {this.state.widths.map(width =>\n          <p onClick={() => this.updateArray(width)}>play {width}x{width}</p>\n        )}\n\n        <div className=\"status\">{nextturn}</div>\n        <div className=\"status\">{winner}</div>\n        <div className={`board-container width-${this.state.width}`}>\n          {this.state.squares.map((square,index) =>\n            <Button\n              onClick={() => this.handleClick(index)}\n              value={this.state.squares[index]}\n              key={index}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./components/board\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Board/>\n          <div className=\"game-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n      </React.Fragment>\n    );\n  };\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}